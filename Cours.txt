Dernière partie de la merge stack


c'est à l'insertion de la clef et de la valeur que la bdd est créée. 

![[Pasted image 20240304102008.png]]

```shell
db.ma_Collection.insertOne({ "cle": "valeur" })
```

changer la valeur d'une cle :
```shell
db.ma_Collection.updateOne( { "prenom": "Yuri" }, { $set : { "prenom" : "YURI" }})
```


Rechercher et ne restortir que les prenom/champs spé mais on aura le champ de l'id : 

```Shell
db.ma_Collection.find({ "age" : "23" }, {"prenom" : 1 })
```

Sans le champs id :
```Shell
db.ma_Collection.find({ "age" : "23" }, {"prenom" : 1 , "_id" : 0 })
```


Personne qui n'ont pas 76ans : 
```Shell
db.personnes.find({"age": {$ne : 76}}, {"_id" : 0, "prenom" : 1 })
```
![[Pasted image 20240304122923.png]]

Personnes qui n'ont pas 70 ou 80 ans : 
```Shell
db.personnes.find({"age" : {$nin : [70, 80 ]}}, {"_id" : 0, "prenom" : 1 , "nom" : 1 })
```
![[Pasted image 20240304123310.png]]

Même chose mais on ne prends que les personne qui ont un formulaire complet et avec l'opérateur logique ET :
```Shell
db.personnes.find({ $and : [{"age": {$nin : [70,80]}}, {"age": {$exists : true}}]}, {_id: 0, nom:1, prenom: 1 })
```
![[Pasted image 20240304134206.png]]


$clé = valeur équivalent du this en Programmation Objet.



Exercice banque : 
```Shell 
db.banque.find({
 "debit": { $exists: 1 },
 "credit": { $exists: 1 },
 $expr: { $gt: [ {$sum: "$debit"}, "$credit"]}
 },
 {"_id":1}
)
```

$sum peut s'effectuer sur tout un tableau.

Correction : 
```Shell
db.banque.find({
 "debit": { $exists: 1 },
 $expr: { $gt: [ {$sum: "$debit"}, "$credit"]}
 }
)
```


Si on veut un résultat sans tableau il faut pensé à supp les [] dans les requêtes de résultats

tri croissant : 1
tri décroissant : -1


### Exercice Salle

Exercice 1 : salle qui sont des smac : 
```Shell
db.salles.find({ smac: true }, { nom: 1 })
```
2 documents : nom: 'AJMI Jazz Club' & 'Paloma'




Exercice 2 : salles qui ont la capacité d'accueil supérieur à 1000 : 
```Shell
db.salles.find({ capacite: { $gt: 1000 } }, { _id: 0, nom: 1 })
```
1 document : nom: 'Paloma'



Exercice 3 : Affichez l’identifiant des salles pour lesquelles le champ adresse ne comporte pas de numéro. 

```Shell
db.salles.find({ "adresse.numero": { $exists: false } }, { _id: 1 })
```
1 document : _id: 3


Exercice 4 : Affichez l’identifiant puis le nom des salles qui ont exactement un avis.
```Shell
db.salles.find({ avis: { $size: 1 } }, { _id: 1, nom: 1 })
```
1 document : {
  _id: 2,
  nom: 'Paloma'
}

L'opérateur `$size` en MongoDB est utilisé pour sélectionner les documents où le tableau associé à un champ contient un nombre spécifique d'éléments (ici on cherche les tableaux d'avis qui n'ont qu'un seul avis).



Exercice 5 : Affichez tous les styles musicaux des salles qui programment notamment du blues.
```Shell
db.salles.find({ styles: "blues" }, { _id: 0, nom: 1 , styles: 1 })
```
2 documents :  nom: 'AJMI Jazz Club' & 'Sonograf'



Exercice 6 : Affichez tous les styles musicaux des salles qui ont le style « blues » en première position dans leur tableau styles.
```Shell
db.salles.find({ "styles.0": "blues" }, { _id: 0, nom : 1, styles: 1 })
```
1 document : nom: 'Sonograf',  styles: ['blues','rock']
'style.X' x est la place de l'élément dans le tableau (ressemble à ce qu'on peut faire en C++)



Exercice 7 : Affichez la ville des salles dont le code postal commence par 84 et qui ont une capacité strictement inférieure à 500 places (pensez à utiliser une expression régulière).

```Shell
db.salles.find({ 
    "adresse.codePostal": { $gte: "84000", $lt: "85000" }, 
    capacite: { $lt: 500 }
}, { _id: 0, "nom" : 1, "adresse.ville": 1 })
```
2 documents : 

{
  nom: 'AJMI Jazz Club',
  adresse: {
    ville: 'Avignon'
  }
}

{
  nom: 'Sonograf',
  adresse: {
    ville: 'Le Thor'
  }
}

$gte = plus grand ou égale >=
$lt = plus petit <



Exercice 8 : Affichez l’identifiant pour les salles dont l’identifiant est pair ou le champ avis est absent.

```Shell
db.salles.find({ 
    $or: [
        { _id: { $mod: [2, 0] } }, 
        { avis: { $exists: false } }
    ]
}, { _id: 1 })

```
2 Documents : 
{
  _id: 2,
  nom: 'Paloma'
}
&
{
  _id: 3,
  nom: 'Sonograf'
}

{ _id: { $mod: [2, 0] } }, l'identifiant pair en utilisant $mod (modulo)
{ avis: { $exists: false } }  le champ avis est absent 



Exercice 9: Affichez le nom des salles dont au moins un des avis comporte une note comprise entre 8 et 10 (tous deux inclus).
```Shell
db.salles.find(
    {
        "avis.note": { $gte: 8, $lte: 10 }
    },
    { _id: 0, nom: 1 }
)
```
2 documents : nom: 'Paloma' & 'AJMI Jazz Club'



Exercice 10 : Affichez le nom des salles dont au moins un des avis comporte une date postérieure au 15/11/2019 (pensez à utiliser le type JavaScript Date).

```Shell
db.salles.find(
    {
        "avis.date": { $gt: new Date("2019-11-15") }
    },
    { _id: 0, nom: 1 }
)
```
1 Document : nom: 'AJMI Jazz Club'



Exercice 11 : Affichez le nom ainsi que la capacité des salles dont le produit de la valeur de l’identifiant par 100 est strictement supérieur à la capacité.
```Shell
db.salles.find(
    { 
        $expr: { 
            $gt: [{ $multiply: ["$_id", 100] }, "$capacite"] 
        } 
    }, 
    { _id: 0, nom: 1, capacite: 1 }
)
```
1 document : 
{
  _id: 3,
  nom: 'Sonograf',
  capacite: 200
}



Exercice 12 : Affichez le nom des salles de type SMAC programmant plus de deux styles de musiques différents en utilisant l’opérateur $where qui permet de faire usage de JavaScript.

```Shell
db.salles.find({
    smac: true,
    $where: function() {
        return this.styles.length > 2;
    }
}, { _id: 0, nom: 1 });
```
1 Document : nom : 'AJMI Jazz Club'



Exercice 13 Affichez les différents codes postaux présents dans les documents de la collection salles.
```Shell
db.salles.distinct("adresse.codePostal")
```
[ '30000', '84000', '84250' ]

doc: https://www.mongodb.com/docs/manual/reference/method/db.collection.distinct/



Exercice 14 : Mettez à jour tous les documents de la collection salles en rajoutant 100 personnes à leur capacité actuelle.
```Shell
db.salles.updateMany(
    {},
    { $inc: { capacite: 100 } }
)
```
Réponse de la requête :
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 3,
  modifiedCount: 3,
  upsertedCount: 0
}

Ici le filtre est vide car on souhaite appliquer la modification sur toute la collection.
L'opérateur $inc sert à incrémenter la capacité de 100. https://www.mongodb.com/docs/manual/reference/operator/update/inc/



Exercice 15 : Ajoutez le style « jazz » à toutes les salles qui n’en programment pas.
```Shell
db.salles.updateMany(
    { styles: { $ne: "jazz" } },
    { $addToSet: { styles: "jazz" } }
)
```
Réponse : 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 2,
  modifiedCount: 2,
  upsertedCount: 0
}
`$ne`sélectionne les documents où la valeur de la le champ spécifié n'est pas égal à la valeur spécifiée. Cela inclut les documents qui ne contiennent pas le champ spécifié. https://www.mongodb.com/docs/manual/reference/operator/query/ne/



Exercice 16 : Retirez le style «funk» à toutes les salles dont l’identifiant n’est égal ni à 2, ni à 3.
```Shell
db.salles.updateMany(
    { _id: { $nin: [2, 3] } }, 
    { $pull: { styles: "funk" } } 
)
```

Réponse : 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

Sélectionne les salles dont l’identifiant n’est pas égal à 2 ni à 3 :
`$nin` sélectionne les documents où :
la valeur de champ spécifiée n'est pas dans le tableau spécifié ou le champ spécifié n'existe pas.
https://www.mongodb.com/docs/manual/reference/operator/query/nin/

Retire le style "funk" des salles sélectionnées :
L'opérateur `$pull` supprime d'un tableau existant toutes les instances d'une ou plusieurs valeurs qui correspondent à une condition spécifiée.
https://www.mongodb.com/docs/manual/reference/operator/update/pull/



Exercice 17 : Ajoutez un tableau composé des styles «techno» et « reggae » à la salle dont l’identifiant est 3.
```Shell
db.salles.updateOne( { _id: 3 }, { $set: { styles: ["techno", "reggae"]}})
```
Réponse :
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}



Exercice 18 : Pour les salles dont le nom commence par la lettre P (majuscule ou minuscule), augmentez la capacité de 150 places et rajoutez un champ de type tableau nommé contact dans lequel se trouvera un document comportant un champ nommé telephone dont la valeur sera « 04 11 94 00 10 ».

```Shell
db.salles.updateMany(
    { $or: [ { nom: /^P/ }, { nom: /^p/ } ] }, 
    { 
        $inc: { capacite: 150 }, 
        $set: {
            contact: [{ nom: "telephone", valeur: "04 11 94 00 10" }]
        }
    }
)
```
Réponse : 
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}

L'opérateur `$or` effectue une opération logique `OR`  sur un tableau de _un ou plusieurs_ `<expressions>` et sélectionne les documents qui satisfait  _au moins_ l'une des `<expressions>`.
https://www.mongodb.com/docs/manual/reference/operator/query/or/




### Cours 
#### Index
##### Index simple

voici une synttaxe générale pour créer un index simple :

```Shell
db.collection.creatIndex(<field + type >, <options>)
```



### Exercice Validation 

Exercice 1 : Modifiez la collection salle afin que soient dorénavant validés les documents destinés à y être insérés ; cette validation aura lieu en mode « strict » et portera sur les champs suivants :

nom sera obligatoire et devra être de type chaîne de caractères.

capacité sera obligatoire et devra être de type entier (int).

Dans le champ adresse, les champs codePostal et ville, tous deux de type chaîne de caractères, seront obligatoires.

Que constatez-vous lors de la tentative d’insertion suivante, et quelle en est la cause ?

```
db.salles.insertOne( 
{"nom": "Super salle", "capacite": 1500, "adresse": {"ville": "Musiqueville"}} 
) 
```

Que proposez-vous pour régulariser la situation ?

### Cours Index et Géo

## Les types d'index

### Index simples

Voici la syntaxe generale pour créer un index simple :

```
db.collection.createIndex(<field + type> , <options>)
```

Pour la suite de ce cours on utilisera la nouvelle version de la collection personnes (cf Teams)

pour une creer un index sur le champ age:

```
db.personnes.createIndex({ age: 1 });
```

Pour supprimer un index :

```
db.personnes.dropIndex({<nom de l'index>})
```

Pour nommer un index :

```
db.personnes.createIndex({ age: 1 }, { name: "age_index" });
```

Au sein d'une collection de grande taille la creation d'inexes peut prendre du temps, pour ne pas bloquer les autres opérations, on peut utiliser l'option `background` :

```
db.personnes.createIndex({ age: 1 }, { background: true });
```

### Index Geospatiaux

MongoDB supporte deux types d'index géospatiaux : 2d et 2dsphere.

Les indexs 2Dsphere gerent deux types de coordonnees :

- les coordonees dites `legacy` : [longitude, latitude]
- les coordonnees dites `GeoJSON` : {type: "Point", coordinates: [longitude, latitude]}

Les index 2d sphere font intervenir l'utilisation d'objets GEoJSOn dont la structure est la suivante :

```
{
  type: "Point",
  coordinates: [ <longitude>, <latitude> ]
}
```

On peut creer d'autres type d'objets GeoJSON, en voici quelques uns :

```
{
    "type": 'MultiPoint',
    "coordinates": [[ <longitude>, <latitude> ], [ <longitude>, <latitude> ], ...]
}
```

```
{
    "type": '?????',
    "coordinates": [[ <longitude>, <latitude> ], [ <longitude>, <latitude> ]]
}
```

Le type Polygon est utilisé pour décrire des formes géométriques fermées. Un polygone est défini par un tableau de coordonnées de points, le premier et le dernier point doivent être les mêmes pour fermer la forme.

```
{
    "type": 'Polygon',
    "coordinates": [
        [ [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ] ]
    ]
}
```

## Les requetes geospatiales

Pre-requis : creation de la collection Avignon Creation d'un index 2dsphere sur le champ localisation

```
db.avignon.createIndex({ localisation: "2dsphere" });
```

#### L'operateur $nearSphere

Cet opérateur requiert un index géospatial de type 2dsphere quand on l’utilise avec des objets GeoJSON et un index 2d quand il est utilisé avec des coordonnées de type legacy. Lorsqu’il opère sur des objets GeoJSON de type Point, sa syntaxe est :

```
{
  <location field>: {
    $nearSphere: {
      $geometry: {
        type: "Point" ,
        coordinates: [ <longitude>, <latitude> ]
      },
      $minDistance: <distance in meters>,
      $maxDistance: <distance in meters>
    }
  }
}
```

![[Pasted image 20240307001930.png]]

#### L'operateur $geoWithin

Cet opérateur requiert un index géospatial de type 2dsphere. Il permet de sélectionner les documents qui sont entièrement inclus dans une zone géographique donnée. Sa syntaxe est la suivante :

```
{
  <location field>: {
    $geoWithin: {
      $geometry: {
        type: "Polygon" ,
        coordinates: [ [ [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ], [ <longitude>, <latitude> ] ]
      }
    }
  }
}
```

![[Pasted image 20240307002007.png]]

### Exercice de Géo 

Exercice 1 : Vous disposez du code JavaScript suivant qui comporte une fonction de conversion d’une distance exprimée en kilomètres vers des radians ainsi que d’un document dont les coordonnées serviront de centre à notre sphère de recherche. Écrivez la requête $geoWithin qui affichera le nom des salles situées dans un rayon de 60 kilomètres et qui programment du Blues et de la Soul.

```
var KilometresEnRadians = function(kilometres){ 
   var rayonTerrestreEnKm = 6371; 
   return kilometres / rayonTerrestreEnKm; 
}; 
 
var salle = db.salles.findOne({"adresse.ville": "Nîmes"}); 
 
var requete = { ... }; 
 
db.salles.find(requete ... }; 
```

Réponse : 
```Shell
var KilometresEnRadians = function(kilometres){ 
   var rayonTerrestreEnKm = 6371; 
   return kilometres / rayonTerrestreEnKm; 
}; 

var salle = db.salles.findOne({"adresse.ville": "Nîmes"}); 

var requete = { 
   "adresse.localisation": {
      $geoWithin: {
         $centerSphere: [ [ salle.adresse.localisation.coordinates[0], salle.adresse.localisation.coordinates[1] ], KilometresEnRadians(60) ]
      }
   },
   styles: { $all: ["blues", "soul"] }
}; 

db.salles.find(requete, { nom: 1 });
```
Document :
```Shell
{
  _id: 1,
  nom: 'AJMI Jazz Club'
}
```



Exercice 2 : Écrivez la requête qui permet d’obtenir la ville des salles situées dans un rayon de 100 kilomètres autour de Marseille, triées de la plus proche à la plus lointaine :

```
var marseille = {"type": "Point", "coordinates": [43.300000, 5.400000]} 
 
db.salles.find(...) 
```

Réponse :

Bien pensé à créer un index si on veut utiliser les opérateurs `$nearSphere` ou `$geoWithin` : 
```Shell
db.salles.createIndex({ "adresse.localisation": "2dsphere" }); 
//prends en compte le format legacy et GeoJSon
```

```Shell
var marseille = { "type": "Point", "coordinates": [43.300000, 5.400000] };

db.salles.find({
  "adresse.localisation": {
    $nearSphere: {
      $geometry: marseille,
      $maxDistance: 100000 // Distance maximale en mètres (100 kilomètres)
    }
  }
}, { "adresse.ville": 1 });
```

Documents :
```Shell
{
  _id: 3,
  adresse: {
    ville: 'Le Thor'
  }
}
{
  _id: 3,
  adresse: {
    ville: 'Le Thor'
  }
}
```



Exercice 3:

Soit polygone un objet GeoJSON de la forme suivante :

```
var polygone = { 
     "type": "Polygon", 
     "coordinates": [ 
            [ 
               [43.94899, 4.80908], 
               [43.95292, 4.80929], 
               [43.95174, 4.8056], 
               [43.94899, 4.80908] 
            ] 
     ] 
} 
```

Donnez le nom des salles qui résident à l’intérieur.

```Shell
var polygone = {
  "type": "Polygon",
  "coordinates": [
    [
      [43.94899, 4.80908],
      [43.95292, 4.80929],
      [43.95174, 4.8056],
      [43.94899, 4.80908]
    ]
  ]
};

db.salles.find({
  "adresse.localisation": {
    $geoWithin: {
      $geometry: polygone
    }
  }
}, { nom: 1 });

```

Réponse : 
```Shell
var polygone = {
  "type": "Polygon",
  "coordinates": [
    [
      [43.94899, 4.80908],
      [43.95292, 4.80929],
      [43.95174, 4.8056],
      [43.94899, 4.80908]
    ]
  ]
};

db.salles.find({
  "adresse.localisation": {
    $geoWithin: {
      $geometry: polygone
    }
  }
}, { nom: 1 });
```

Sortie : 
```Shell
{
  _id: 1,
  nom: 'AJMI Jazz Club'
}
```




### Exercice Achat 
```Shell
db.achats.insertMany([{     "nom": "Pascal",     "prenom": "Léo",     "achats": [112.29, 88.36, 72.01],     "reductions": [12.30, 2.01]  },  {     "nom": "Perez",     "prenom": "Alex",     "achats": [20.01, 296.35],     "reductions": [9.91, 0.87]  }])
```

Ecrivez un pipeline aggregation qui permet d’obtenir le total payé par personnes et arrondissez.

```Shell
db.achats.aggregate([
  {
    $project: {
      nom: 1,
      prenom: 1,
      totalAchats: { $sum: "$achats" },
      totalReductions: { $sum: "$reductions" }
    }
  },
  {
    $addFields: {
      totalPaye: { $subtract: ["$totalAchats", "$totalReductions"] }
    }
  },
  {
    $group: {
      _id: { nom: "$nom", prenom: "$prenom" },
      totalPaye: { $sum: "$totalPaye" }
    }
  },
  {
    $project: {
      _id: 0,
      nom: "$_id.nom",
      prenom: "$_id.prenom",
      totalPayeArrondi: { $round: ["$totalPaye", 2] }
    }
  }
])
```

Réponse : 
2 Documents : 
```Shell
{
  nom: 'Pascal',
  prenom: 'Léo',
  totalPayeArrondi: 258.35
}
{
  nom: 'Perez',
  prenom: 'Alex',
  totalPayeArrondi: 305.58
}
```



```Shell
db.ventes.aggregate([
{$lookup : 
	{
		"from" : "artistes",
		"localField" : "artiste",
		"foreignField" : "nom",
		"as" : "detail_artiste"
	}
}
])
```

Réponse : 
```Shell
{
  _id: ObjectId('65e84b81f3d762e2a248a38c'),
  artiste: 'Michael Jackson',
  nb_units: 84000000,
  detail_artiste: [
    {
      _id: ObjectId('65e84b81f3d762e2a248a38a'),
      nom: 'Michael Jackson',
      pays: 'USA'
    }
  ]
}
{
  _id: ObjectId('65e84b81f3d762e2a248a38d'),
  artiste: 'The Beatles',
  nb_units: 183000000,
  detail_artiste: [
    {
      _id: ObjectId('65e84b81f3d762e2a248a38b'),
      nom: 'The Beatles',
      pays: 'ENG'
    }
  ]
}
```


### Agrégation 
#### Exercice 
Exercice 1

Écrivez le pipeline qui affichera dans un champ nommé ville le nom de celles abritant une salle de plus de 50 personnes ainsi qu’un booléen nommé grande qui sera positionné à la valeur « vrai » lorsque la salle dépasse une capacité de 1 000 personnes. Voici le squelette du code à utiliser dans le shell :

```
var pipeline = [ 
... 
] 
```

db.salles.aggregate(pipeline)

```Shell
var pipeline = [ 
  {
    $match: {
      capacite: { $gt: 50 } // Filtrer les salles ayant une capacité de plus de 50 personnes
    }
  },
  {
    $project: {
      _id: 0, // Exclure le champ _id du résultat final
      ville: "$adresse.ville", // Créer le champ ville avec le nom de la ville
      grande: { $gt: ["$capacite", 1000] } // Créer le champ grande avec la condition si la capacité est supérieure à 1000
    }
  }
]; 

db.salles.aggregate(pipeline);
```

Réponse  : 2 Documents :
```Shell
{
  ville: 'Le Thor',
  grande: false
}
{
  ville: 'Nîmes',
  grande: true
}
{
  ville: 'Avignon',
  grande: false
}
```



 Exercice 2

Écrivez le pipeline qui affichera dans un champ nommé apres_extension la capacité d’une salle augmentée de 100 places, dans un champ nommé avant_extension sa capacité originelle, ainsi que son nom.

```Shell
var pipeline = [ 
  {
    $addFields: {
      avant_extension: "$capacite", 
      apres_extension: { $add: ["$capacite", 100] }
    }
  },
  {
    $project: {
      _id: 0, // Exclure le champ _id du résultat final
      nom: 1, // Inclure le champ nom
      avant_extension: 1, // Inclure le champ avant_extension
      apres_extension: 1 // Inclure le champ apres_extension
    }
  }
]; 

db.salles.aggregate(pipeline);
```
avant_extension: "$capacite", // Créer le champ avant_extension avec la capacité originale

Réponse : 3 Documents : 
```Shell
{
  nom: 'AJMI Jazz Club',
  avant_extension: 400,
  apres_extension: 500
}

  nom: 'Paloma',
  avant_extension: 4250,
  apres_extension: 4350
}
  nom: 'Paloma',
  avant_extension: 4250,
  apres_extension: 4350
}
```


Exercice 3

Écrivez le pipeline qui affichera, par numéro de département, la capacité totale des salles y résidant. Pour obtenir ce numéro, il vous faudra utiliser l’opérateur $substrBytes dont la syntaxe est la suivante :

```
{$substrBytes: [ < chaîne de caractères >, < indice de départ >, 
< longueur > ]} 
```

```Shell
var pipeline = [
  {
    $project: { //selection des champs
      codePostal: "$adresse.codePostal",
      capacite: "$capacite" 
    }
  },
  {
    $group: {
      _id: { $substrBytes: ["$codePostal", 0, 2] }, // Extrait les deux premiers caractères du code postal comme numéro de département
      capaciteTotale: { $sum: "$capacite" } // Calculer la capacité totale des salles pour chaque département
    }
  }
];

db.salles.aggregate(pipeline);
```

Réponse : 
```Shell
{
  _id: '84',
  capaciteTotale: 700
}
{
  _id: '30',
  capaciteTotale: 4250
}
```



Exercice 4 

Écrivez le pipeline qui affichera, pour chaque style musical, le nombre de salles le programmant. Ces styles seront classés par ordre alphabétique.

```Shell
var pipeline = [
  {
    $unwind: "$styles" // Décompos le tableau de styles en documents individuels
  },
  {
    $group: {
      _id: "$styles", // Groupe par style musical
      nombreSalles: { $sum: 1 } // Compte le nombre de salles pour chaque style musical
    }
  },
  {
    $sort: { _id: 1 } // Tri les résultats par ordre alphabétique du style musical
  }
];

db.salles.aggregate(pipeline);
```


Correction : 
```Shell
var pipeline = [
  {
    $unwind: "$styles" // Décompose le tableau de styles en documents individuels
  },
  {
    $sortByCount: "$styles" // Trie et compte le nombre de salles pour chaque style musical
  },
  {
    $sort: { _id: 1 } // Trie les résultats par ordre alphabétique du style musical
  }
];

db.salles.aggregate(pipeline);
```


Réponse : 
```Shell
{
  _id: 'blues',
  nombreSalles: 1
}
{
  _id: 'jazz',
  nombreSalles: 2
}
{
  _id: 'reggae',
  nombreSalles: 1
}
{
  _id: 'soul',
  nombreSalles: 1
}
{
  _id: 'techno',
  nombreSalles: 1
}
```



Exercice 5

À l’aide des buckets, comptez les salles en fonction de leur capacité :celles de 100 à 500 places ,
celles de 500 à 5000 places

```Shell
var pipeline = [
  {
    $bucket: {
      groupBy: "$capacite", // Champ à regrouper (capacité des salles)
      boundaries: [100, 500, 5000], // Fixe les Limites des buckets
      default: "Other", // Bucket par défaut pour les valeurs en dehors des limites spécifiées
      output: {
        salles: { $push: "$nom" }, // Permet de stocker le nom des salles dans chaque bucket
        count: { $sum: 1 } // Compte le nombre de salles dans chaque bucket
      }
    }
  }
];

db.salles.aggregate(pipeline);
```

Réponse : 
```Shell
{
  _id: 100,
  salles: [
    'Sonograf',
    'AJMI Jazz Club'
  ],
  count: 2
}
{
  _id: 500,
  salles: [
    'Paloma'
  ],
  count: 1
}
```



Exercice 6

Écrivez le pipeline qui affichera le nom des salles ainsi qu’un tableau nommé avis_excellents qui contiendra uniquement les avis dont la note est de 10.

```Shell

N affiche que les salle qui ont un avis de 10 :

var pipeline = [
  {
    $match: {
      "avis.note": 10 //Filtre les documents où au moins un avis a une note de 10
    }
  },
  {
    $project: {
      nom: 1, // Conserver le champ nom
      avis_excellents: {
        $filter: {
          input: "$avis", // Champ à filtrer (tableau d avis)
          as: "avis", // Alias pour chaque élément du tableau
          cond: { $eq: ["$$avis.note", 10] } // Condition de filtrage (note égale à 10)
        }
      }
    }
  }
];

db.salles.aggregate(pipeline);


OU


Affiche toutes les salles et leur avis, si pas de champs avis null, si pas d avis de 10 le tableau est vide.

var pipeline = [
  {
    $project: {
      nom: 1,
      avis_excellents: { 
        $filter: {
          input: "$avis", 
          as: "avis", 
          cond: { $eq: ["$$avis.note", 10] }
        }
      }
    }
  }
];

db.salles.aggregate(pipeline);
```

Réponse :
```Shell
V1 :
{
  _id: 2,
  nom: 'Paloma',
  avis_excellents: [
    {
      date: 2019-07-06T00:00:00.000Z,
      note: 10
    }
  ]
}


V2 : 
{
  _id: 3,
  nom: 'Sonograf',
  avis_excellents: null
}
{
  _id: 1,
  nom: 'AJMI Jazz Club',
  avis_excellents: []
}
{
  _id: 2,
  nom: 'Paloma',
  avis_excellents: [
    {
      date: 2019-07-06T00:00:00.000Z,
      note: 10
    }
  ]
}
```




### Exercice perso

#### Importation d'un csv dans Mongo DB Compas.
- Téléchargé la base de données
- Ouvrir Mongo DB Compas
- Se connecter au serveur local host en ayant préalablement installé Mongo DB Community Version sur la machine et avoir modifier les variables d'environnement.
- Créer un nouvelle base de donnée et un nouvelle collection.
- Cliquer sur importer des donnée et sélectionné le fichier.csv
- Décocher l'ignorance de string vide et les colonnes du tableau qui ne seront pas exploités (les documents n'auront pas de champs du nom des colonnes)
- Cliquer sur importer
- Ecrire dans la console `use Nom_de_la_bdd`

#### Compter le nombre de valeurs pour un champs
```Shell
db.test.aggregate([
  {
    $match: {
      brand: "Dell"
    }
  },
  {
    $count: "total"
  }
]);
```

remplacer test par le nom de la collection
brand par la nom du champs souhaiter
"Dell" par le nom de la valeur

#### Compter le nombre de champs qui on soit une valeur soit une autre 

```Shell
db.collection.aggregate([
  {
    $match: {
      $or: [
        { brand: "Dell" },
        { brand: "Microsoft" }
      ]
    }
  },
  {
    $count: "total"
  }
]);
```
$count: "total" // Compter le nombre total de documents correspondants